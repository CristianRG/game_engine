import{_ as s,c as e,o as n,a}from"./app.d777ca12.js";const u=JSON.parse('{"title":"InputKeys","description":"","frontmatter":{},"headers":[{"level":2,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[{"level":3,"title":"trigger(key: string): void","slug":"trigger-key-string-void","link":"#trigger-key-string-void","children":[]}]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]}],"relativePath":"components/inputkeys.md","lastUpdated":1745111117000}'),o={name:"components/inputkeys.md"},t=a(`<h1 id="inputkeys" tabindex="-1">InputKeys <a class="header-anchor" href="#inputkeys" aria-hidden="true">#</a></h1><p>The <code>InputKeys</code> component allows you to listen for keydown events and trigger specific actions using a hashmap of keys and events. This component can be added to Entities or GameObjects to handle keyboard input effectively.</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h2><ul><li><strong>hashEvents</strong>: <code>Map&lt;string, IEvent&gt;</code><br> A hashmap where the key is a string representing the key to listen for, and the value is an <code>IEvent</code> object that defines the action to be triggered when the key is pressed. Default is an empty <code>Map</code>.</li></ul><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><h3 id="trigger-key-string-void" tabindex="-1"><code>trigger(key: string): void</code> <a class="header-anchor" href="#trigger-key-string-void" aria-hidden="true">#</a></h3><p>Triggers the event associated with the specified key. If no event is mapped to the key, nothing happens.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">InputKeys</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@cristianrg/game_engine</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> jumpEvent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Jump!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> inputKeys </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">InputKeys</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">    [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Space</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> jumpEvent]</span></span>
<span class="line"><span style="color:#A6ACCD;">]))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Now just press &quot;Space&quot; to execute event. </span></span>
<span class="line"></span></code></pre></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><p>The <code>InputKeys</code> component is designed to be added to Entities or GameObjects to handle keyboard input. By mapping keys to specific events, you can easily define custom behaviors for your game objects.</p><p>For example, you can use this component to handle player movement, actions, or other interactions triggered by keyboard input.</p>`,12),p=[t];function l(r,c,i,d,y,h){return n(),e("div",null,p)}const g=s(o,[["render",l]]);export{u as __pageData,g as default};
