{"version":3,"file":"index.min.js","sources":["../src/core/models/System.ts","../src/systems/ColliderSystem.ts","../src/systems/InputKeySystem.ts","../src/systems/PhysicSystem.ts","../src/systems/RenderSystem.ts","../src/core/state/GlobalState.ts","../src/core/models/Injector.ts","../src/core/models/Component.ts","../src/components/common/Transform.ts","../src/components/common/Collider.ts","../src/core/strategy/Collider.ts","../src/components/common/InputKeys.ts","../src/core/strategy/InputKeyEvent.ts","../src/components/common/Physics.ts","../src/components/scene/Entities.ts","../src/components/scene/GameObjects.ts","../src/core/strategy/Physics.ts","../src/components/common/Renderable.ts","../src/components/common/Sprite.ts","../src/core/models/SpriteMethods.ts","../src/core/strategy/RenderScene.ts","../src/core/strategy/RenderSceneStrategy.ts","../src/core/models/ECS.ts","../node_modules/.pnpm/@rollup+plugin-typescript@12.1.2_rollup@4.34.9_tslib@2.8.1_typescript@5.8.2/node_modules/tslib/tslib.es6.js","../src/core/models/Scene.ts","../src/core/decorators/SceneDecorator.ts","../src/core/models/Engine.ts","../src/core/models/Entity.ts","../src/core/decorators/EntityDecorator.ts","../src/core/models/GameObject.ts","../src/core/decorators/ObjectDecorator.ts","../src/core/models/Sprite.ts","../src/core/models/Physics.ts","../src/core/physics/Gravity.ts","../src/core/physics/Jump.ts"],"sourcesContent":["import { ISystem } from \"../interfaces/ISystem\";\r\n/**\r\n * System is a base class for all systems in the game engine.\r\n * It provides a unique ID for each system and an abstract execute method that must be implemented by subclasses.\r\n * This class is used to create systems that can be executed in the engine.\r\n */\r\nexport abstract class System implements ISystem {\r\n    private static _id: number;\r\n    id: number = System._id++;\r\n\r\n    abstract execute(): void;\r\n}","import { IColliderStrategy } from \"../core/interfaces/IStrategy\";\r\nimport { System } from \"../core/models/System\";\r\n\r\nexport class ColliderSystem extends System {\r\n\r\n    constructor(public strategy: IColliderStrategy | null = null) {\r\n        super();\r\n    }\r\n\r\n    execute(): void {\r\n        if(this.strategy){\r\n            this.strategy.collide();\r\n        }\r\n    }\r\n}","import { System } from \"../core/models/System\";\r\nimport { IKeyEventStrategy } from \"../core/interfaces/IStrategy\";\r\n\r\nexport class InputKeySystem extends System {\r\n\r\n    constructor(\r\n        private setupAlready: boolean = false,\r\n        public strategy: IKeyEventStrategy | null = null\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    execute(): void {\r\n        this.setup();\r\n    }\r\n\r\n    setup(): void {\r\n        if(this.setupAlready) return;\r\n        this.setupAlready = true;\r\n        document.addEventListener('keydown', (e) => {\r\n            if(this.strategy){\r\n                this.strategy.trigger(e.key);\r\n            }\r\n        });\r\n    }\r\n    \r\n}","import { System } from \"../core/models/System\";\r\nimport { Physics } from \"../core/strategy/Physics\";\r\n\r\nexport class PhysicSystem extends System {\r\n\r\n    private strategy: Physics;\r\n\r\n    constructor(strategy: Physics) {\r\n        super();\r\n        this.strategy = strategy;\r\n    }\r\n\r\n    execute(): void {\r\n        this.strategy.applyPhysics();\r\n    }\r\n    \r\n}","import { IRenderStrategy } from \"../core/interfaces/IScene\";\r\nimport { System } from \"../core/models/System\";\r\n\r\nexport class RenderSystem extends System {\r\n\r\n    constructor(public strategy: IRenderStrategy | null = null) {\r\n        super();\r\n    }\r\n\r\n    execute(): void {\r\n        if(this.strategy){\r\n            this.strategy.render();\r\n        }\r\n    }\r\n}","import { IGlobalState } from \"../interfaces/IGlobalState\";\nimport { Entity } from \"../models/Entity\";\nimport { GameObject } from \"../models/GameObject\";\nimport { Scene } from \"../models/Scene\";\n\nexport class GlobalState {\n    private static instance: GlobalState;\n    currentScene: Scene | null;\n    scenes: Scene[];\n    entities: Entity[];\n    objects: GameObject[];\n\n    private constructor() {\n        this.currentScene = null;\n        this.scenes = [];\n        this.entities = [];\n        this.objects = [];\n    }\n\n    static getInstance(): GlobalState {\n        if (!GlobalState.instance) {\n            GlobalState.instance = new GlobalState();\n        }\n        return GlobalState.instance;\n    }\n}","import { IComponent, IComponentMehtods } from \"../interfaces/IComponent\";\r\n\r\nexport abstract class ComponentManager implements IComponentMehtods {\r\n    _components: Map<string, IComponent> = new Map<string, IComponent>();\r\n    addComponent(component: IComponent): this {\r\n        this._components.set(component.constructor.name, component);\r\n\r\n        if (\"setObject\" in component && typeof (component as any).setObject === \"function\") {\r\n            (component as any).setObject(this);\r\n        }\r\n\r\n        return this\r\n    }\r\n    getComponent<T extends IComponent>(type: new () => T): T | undefined {\r\n        return this._components.get(type.name) as T;\r\n    }\r\n    hasComponent<T extends IComponent>(type: new () => T): boolean {\r\n        return this._components.has(type.name);\r\n    }\r\n}\r\n\r\nexport abstract class ObjectBinder<T> {\r\n    object!: T;\r\n    setObject(object: T): void {\r\n        this.object = object;\r\n    }\r\n}","import { IComponent } from \"../interfaces/IComponent\";\r\nimport { ObjectBinder } from \"./Injector\";\r\nimport { Entity } from \"./Entity\";\r\nimport { GameObject } from \"./GameObject\";\r\n/**\r\n * Base class for all components in the engine. Components are used to add functionality to entities and game objects.\r\n */\r\nexport abstract class Component extends ObjectBinder<Entity | GameObject> implements IComponent {}","import { Component } from \"../../core/models/Component\";\r\n/**\r\n * Transform component\r\n * This component is used to move the entity or gameObject in the scene.\r\n */\r\nexport class Transform extends Component {\r\n    private movementTimeout: number | null = null;\r\n    private readonly MOVEMENT_TIMEOUT_DURATION = 100; // ms\r\n    public direction: \"up\" | \"down\" | \"left\" | \"right\" | \"quiet\" = \"quiet\";\r\n\r\n    constructor(\r\n        public x: number = 0,\r\n        public y: number = 0,\r\n        public width: number = 50,\r\n        public height: number = 50,\r\n        public movementSpeed: number = 5,\r\n        public rotation: number = 0,\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public translate(move: \"up\" | \"down\" | \"left\" | \"right\"): void {\r\n        let x, y: number;\r\n        switch(move){\r\n            case \"up\":\r\n                x = 0;\r\n                y = -this.movementSpeed;\r\n                break;\r\n            case \"down\":\r\n                x = 0;\r\n                y = this.movementSpeed;\r\n                break;\r\n            case \"left\":\r\n                x = -this.movementSpeed;\r\n                y = 0;\r\n                break;\r\n            case \"right\":\r\n                x = this.movementSpeed;\r\n                y = 0;\r\n                break;\r\n            default:\r\n                x = 0;\r\n                y = 0;\r\n                break;\r\n        }\r\n        this.x += x;\r\n        this.y += y;\r\n        this.trackMovementDirection(x, y);\r\n        this.resetMovementTimeout();\r\n    }\r\n\r\n    public undo(): void {\r\n        switch (this.direction) {\r\n            case \"up\":\r\n                this.y += this.movementSpeed;\r\n                break;\r\n            case \"down\":\r\n                this.y -= this.movementSpeed;\r\n                break;\r\n            case \"left\":\r\n                this.x += this.movementSpeed;\r\n                break;\r\n            case \"right\":\r\n                this.x -= this.movementSpeed;\r\n                break;\r\n            case \"quiet\":\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    private trackMovementDirection(x: number, y: number): void {\r\n        if(x < 0) this.direction = \"left\";\r\n        if(x > 0) this.direction = \"right\";\r\n        if(y < 0) this.direction = \"up\";\r\n        if(y > 0) this.direction = \"down\";\r\n    }\r\n\r\n    private resetMovementTimeout(): void {\r\n        if (this.movementTimeout !== null) {\r\n            clearTimeout(this.movementTimeout);\r\n        }\r\n\r\n        this.movementTimeout = setTimeout(() => {\r\n            this.direction = \"quiet\";\r\n        }, this.MOVEMENT_TIMEOUT_DURATION) as unknown as number;\r\n    }\r\n}","import { Component } from \"../../core/models/Component\";\nimport { Transform } from \"./Transform\";\n/**\n * Collider component\n * This component is used to detect collisions between entities or gameObjects.\n * It uses the Transform component to get the position and size of the entity.\n * It uses the onCollision method to call the collision function of the other entity.\n */\nexport class Collider extends Component {\n    constructor(\n        public onCollision: (collider: Collider) => void = () => {}\n    ){\n        super();\n    }\n    /**\n     * Check if this entity is colliding with another entity\n     * @param collider Collider component of the other entity that this entity is colliding with\n     * @returns true if this entity is colliding with the other entity, false otherwise\n     * Also calls the collisionEnter method of the other entity\n     */\n    public isColliding(collider: Collider): boolean {\n        const entityCollider = this.object.getComponent(Collider);\n        const otherCollider = collider.object.getComponent(Collider);\n\n        if(!entityCollider || !otherCollider) return false;\n\n        const t = this.object.getComponent(Transform);\n        const otherT = collider.object.getComponent(Transform);\n\n        if(!t || !otherT) return false;\n\n        const collsionDetected = (\n            t.x < otherT.x + otherT.width &&\n            t.x + t.width > otherT.x &&\n            t.y < otherT.y + otherT.height &&\n            t.y + t.height > otherT.y\n        );\n\n        if(collsionDetected) {\n            this.collisionEnter(collider);\n            collider.collisionEnter(this);\n        }\n\n        return collsionDetected;\n    }\n    /**\n     * \n     * @param collider Collider component of the other entity that this entity is colliding with\n     * Move this entity to the edge of the other entity using his transform component and the other entity's transform component.\n     */\n    public collisionEnter(collider: Collider): void {\n        const transform = this.object.getComponent(Transform);\n        const otherTransform = collider.object.getComponent(Transform);\n\n        if (!transform || !otherTransform) return;\n\n        if (transform.direction !== \"quiet\") {\n            switch (transform.direction) {\n                case \"up\":\n                    transform.y = otherTransform.y + otherTransform.height;\n                    break;\n                case \"down\":\n                    transform.y = otherTransform.y - transform.height;\n                    break;\n                case \"left\":\n                    transform.x = otherTransform.x + otherTransform.width;\n                    break;\n                case \"right\":\n                    transform.x = otherTransform.x - transform.width;\n                    break;\n            }\n        }\n        this.onCollision(collider);\n    }\n}","import { IColliderStrategy } from \"../interfaces/IStrategy\";\r\nimport { GlobalState } from \"../state/GlobalState\";\r\nimport { Collider as ColliderComponent } from \"../../components/common/Collider\";\r\nimport { Transform } from \"../../components/common/Transform\";\r\nexport class Collider implements IColliderStrategy {\r\n    public globalState = GlobalState.getInstance();\r\n    public entitiesColliderExecuting = false;\r\n    public objectsColliderExecuting = false;\r\n\r\n    collide(): void {\r\n        this.entityCollide();\r\n        this.objectCollide();\r\n    }\r\n\r\n    entityCollide(): void {\r\n        const entities = this.globalState.entities.filter(e => e.getComponent(ColliderComponent));\r\n        for (const entity of entities) {\r\n            const collider = entity.getComponent(ColliderComponent)!;\r\n    \r\n            for (const entityTwo of entities) {\r\n                if(entity === entityTwo) continue;\r\n                const colliderTwo = entityTwo.getComponent(ColliderComponent)!;\r\n                collider.isColliding(colliderTwo);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    objectCollide(): void {\r\n        const objects = this.globalState.objects.filter(e => e.getComponent(ColliderComponent));\r\n        for (const object of objects) {\r\n            const collider = object.getComponent(ColliderComponent)!;\r\n            \r\n            for (const entity of this.globalState.entities) {\r\n                const colliderTwo = entity.getComponent(ColliderComponent)!;\r\n                if(collider.isColliding(colliderTwo)){\r\n                    collider.onCollision(colliderTwo);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { Component } from \"../../core/models/Component\";\r\nimport { IEvent } from \"../../core/interfaces/IEvent\";\r\n/**\r\n * InputKeys is a component that listens for keydown events and triggers events when a key is pressed. \r\n * Using `Event` class to store the event to be triggered when the key is pressed.\r\n */\r\nexport class InputKeys extends Component {\r\n    constructor(\r\n        public hashEvents: Map<string, IEvent> = new Map(), \r\n    ){ \r\n        super();\r\n    }\r\n\r\n    public trigger(key: string): void{\r\n        this.hashEvents.get(key)?.event();\r\n    }\r\n}","import { InputKeys } from \"../../components/common/InputKeys\";\r\nimport { IKeyEventStrategy } from \"../interfaces/IStrategy\";\r\nimport { GlobalState } from \"../state/GlobalState\";\r\n\r\nexport class InputKeyEvent implements IKeyEventStrategy {\r\n    private entities = GlobalState.getInstance().entities;\r\n\r\n    trigger(key: string): void {\r\n        const entities = this.entities.filter(e => e.getComponent(InputKeys))\r\n        \r\n        for (const entity of entities) {\r\n            const inputKey = entity.getComponent(InputKeys);\r\n            inputKey?.trigger(key);\r\n        }\r\n    }\r\n}","import { Component } from \"../../core/models/Component\";\r\nimport { Physics as BasePhysics } from \"../../core/models/Physics\";\r\n/**\r\n * Physics component\r\n * This component is used to apply physics to the entity or gameObject.\r\n */\r\nexport class Physics extends Component {\r\n    constructor(\r\n        public physics: BasePhysics[] = []\r\n    ) {\r\n        super();\r\n    }\r\n    /**\r\n     * Apply physics to the entity or gameObject.\r\n     * This method is used to apply physics to the entity or gameObject.\r\n     */\r\n    public applyPhysics(): void {\r\n        if (this.physics.length > 0) {\r\n            for (const physic of this.physics) {\r\n                if (!physic.object) { physic.setObject(this.object) };\r\n                physic.applyPhysics();\r\n            }\r\n        }\r\n    }\r\n}","import { Component } from \"../../core/models/Component\";\r\nimport { Entity } from \"../../core/models/Entity\";\r\n\r\nexport class Entities extends Component {\r\n    private entities: Entity[] = [];\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    setEntities(entities: Entity[]): void {\r\n        this.entities = entities;\r\n    }\r\n\r\n    getEntities(): Entity[] {\r\n        return this.entities\r\n    }\r\n\r\n    getEntityById(id: number): Entity | undefined {\r\n        return this.entities.find(e => e.id === id);\r\n    }\r\n\r\n    addEntity(entity: Entity): void {\r\n        this.entities.push(entity);\r\n    }\r\n\r\n    removeEntity(entity: Entity): void {\r\n        const index = this.entities.findIndex(e => e.id === entity.id);\r\n        if (index > -1) {\r\n            this.entities.splice(index, 1);\r\n        }\r\n    }\r\n}","import { Component } from \"../../core/models/Component\";\r\nimport { GameObject } from \"../../core/models/GameObject\";\r\n\r\nexport class GameObjects extends Component {\r\n    private objects: GameObject[] = [];\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    setObjects(objects: GameObject[]): void {\r\n        this.objects = objects;\r\n    }\r\n\r\n    getObjects(): GameObject[] {\r\n        return this.objects\r\n    }\r\n\r\n    getObjectById(id: number): GameObject | undefined {\r\n        return this.objects.find(e => e.id === id);\r\n    }\r\n\r\n    addObject(object: GameObject): void {\r\n        this.objects.push(object);\r\n    }\r\n\r\n    removeObject(object: GameObject): void {\r\n        const index = this.objects.findIndex(e => e.id === object.id);\r\n        if (index > -1) {\r\n            this.objects.splice(index, 1);\r\n        }\r\n    }\r\n}","import { IPhysicStrategy } from \"../interfaces/IStrategy\";\r\nimport { GlobalState } from \"../state/GlobalState\";\r\nimport { Physics as PhysicComponent } from \"../../components/common/Physics\";\r\nimport type { Entity } from \"../models/Entity\";\r\nimport type { Scene } from \"../models/Scene\";\r\nimport { Entities } from \"../../components/scene/Entities\";\r\nimport { GameObjects } from \"../../components/scene/GameObjects\";\r\nimport { GameObject } from \"../models/GameObject\";\r\n\r\nexport class Physics implements IPhysicStrategy {\r\n    private entities: Entity[] = [];\r\n    private gameObjects: GameObject[] = [];\r\n\r\n    applyPhysics(): void {\r\n        const scene = GlobalState.getInstance().currentScene as Scene;\r\n        if (scene.hasComponent(Entities)) {\r\n            this.entities = scene.getComponent(Entities)!.getEntities().filter(entity => entity.hasComponent(PhysicComponent));\r\n        }\r\n        if (scene.hasComponent(GameObjects)) {\r\n            this.gameObjects = scene.getComponent(GameObjects)!.getObjects().filter(object => object.hasComponent(PhysicComponent));\r\n        }\r\n\r\n        for (const entity of this.entities) {\r\n            const physics = entity.getComponent(PhysicComponent);\r\n            if(physics){\r\n                physics.applyPhysics();\r\n            }\r\n        }\r\n        for (const object of this.gameObjects) {\r\n            const physics = object.getComponent(PhysicComponent);\r\n            if(physics){\r\n                physics.applyPhysics();\r\n            }\r\n        }\r\n    }\r\n}","import { Component } from \"../../core/models/Component\";\r\n/**\r\n * Renderable component\r\n * This component is used to render the entity or gameObject with a solid color.\r\n */\r\nexport class Renderable extends Component {\r\n    constructor(public color: string = \"black\") {\r\n        super();\r\n    }\r\n}","import { Component } from \"../../core/models/Component\";\r\nimport { Sprite as SpriteModel } from \"../../core/models/Sprite\";\r\n/**\r\n * Sprite component\r\n * This component is used to render the entity or gameObject with a sprite.\r\n * @param sprite SpriteModel[] array of sprites to be rendered\r\n * @param speed number speed of the sprite animation\r\n */\r\nexport class Sprite extends Component {\r\n    \r\n    private currentSpriteIndex: number = 0;\r\n\r\n    constructor\r\n    (\r\n        public sprite: SpriteModel[] = [], \r\n        public speed: number = 0,\r\n        public loop: boolean = false\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    private bindObject(sprite: SpriteModel): void {\r\n        sprite.setObject(this.object);\r\n    }\r\n\r\n    getCurrentSprite(): SpriteModel | null {\r\n        if (!this.sprite[this.currentSpriteIndex]?.object && this.sprite.length > 0) {\r\n            this.bindObject(this.sprite[this.currentSpriteIndex]);\r\n        }\r\n        return this.sprite[this.currentSpriteIndex] ?? null;\r\n    }\r\n\r\n    nextSprite(): void {\r\n        this.currentSpriteIndex = this.currentSpriteIndex + 1 >= this.sprite.length ? 0 : this.currentSpriteIndex + 1;\r\n    }\r\n}","import { ISpriteSheetDrawMethods } from \"../interfaces/ISpriteSheet\";\r\nimport { Sprite } from \"../../components/common/Sprite\";\r\nimport { Sprite as SpriteModel } from \"./Sprite\";\r\nimport { Transform } from \"../../components/common/Transform\";\r\n/**\r\n * SpriteAnimationController is a class that implements the ISpriteSheetDrawMethods interface.\r\n * It is responsible for controlling the animation of sprite sheets in the game engine.\r\n */\r\nexport class SpriteAnimationController implements ISpriteSheetDrawMethods {\r\n    stopped: boolean = true;\r\n    private index: number = 0;\r\n    /**\r\n     * \r\n     * @param ctx Canvas context to draw the sprites on\r\n     * @param sprites Sprites list to be drawn\r\n     * This method draws the sprites on the canvas context.\r\n     */\r\n    draw(ctx: CanvasRenderingContext2D, sprites: Sprite[]): void {\r\n        for (const sprite of sprites) {\r\n\r\n            if(!sprite.getCurrentSprite()) continue;\r\n            const {\r\n                x_offset, initialX, initialY, y_offset, frameWidth, frameHeight, resizeWidth, resizeHeight, currentFrame, image, object\r\n            } = sprite.getCurrentSprite() as SpriteModel;\r\n\r\n            const transform = object.getComponent(Transform);\r\n            if (!transform) continue;\r\n\r\n            const { x, y } = transform;\r\n\r\n            ctx.drawImage(\r\n                image,\r\n                initialX + (currentFrame - 1) * (frameWidth + x_offset),\r\n                initialY + y_offset, \r\n                frameWidth,\r\n                frameHeight,\r\n                x,\r\n                y,\r\n                resizeWidth,\r\n                resizeHeight\r\n            );\r\n            const currentSprite = sprite.getCurrentSprite() as SpriteModel;\r\n            currentSprite.currentFrame = currentSprite.currentFrame + 1 >= currentSprite.frameCount ? 1 : currentSprite.currentFrame + 1;\r\n        }\r\n    }\r\n    update(): void {\r\n\r\n    }\r\n    reset(): void {\r\n\r\n    }\r\n    play(ctx: CanvasRenderingContext2D, sprites: Sprite[]): void {\r\n        this.stopped = false;\r\n        this.draw(ctx, sprites);\r\n    }\r\n    stop(): void {\r\n        this.stopped = true;\r\n    }\r\n}","import { Renderable } from \"../../components/common/Renderable\";\r\nimport { Entities } from \"../../components/scene/Entities\";\r\nimport { GameObjects } from \"../../components/scene/GameObjects\";\r\nimport { Sprite } from \"../../components/common/Sprite\";\r\nimport { Transform } from \"../../components/common/Transform\";\r\nimport { IRenderStrategy } from \"../interfaces/IScene\";\r\nimport { Entity } from \"../models/Entity\";\r\nimport { GameObject } from \"../models/GameObject\";\r\nimport { Scene } from \"../models/Scene\";\r\nimport { SpriteAnimationController } from \"../models/SpriteMethods\";\r\nimport { GlobalState } from \"../state/GlobalState\";\r\n\r\nexport class RenderScene extends SpriteAnimationController implements IRenderStrategy {\r\n    scene: Scene | undefined = undefined;\r\n    canvas: HTMLCanvasElement | undefined = undefined;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    \r\n    render(): void {\r\n        this.scene = GlobalState.getInstance().currentScene as Scene;\r\n        this.canvas = this.scene.canvas;\r\n        const ctx = this.canvas.getContext(\"2d\");\r\n        if (ctx) {\r\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n            this.renderScene(ctx);\r\n            this.renderElements(ctx);\r\n        }\r\n    }\r\n\r\n    renderScene(ctx: CanvasRenderingContext2D): void {\r\n        \r\n        if (this.scene?.hasComponent(Transform)) {\r\n\r\n            if (this.scene.hasComponent(Renderable)) {\r\n                const transform = this.scene.getComponent(Transform)!;\r\n                const renderable = this.scene.getComponent(Renderable)!;\r\n                ctx.fillStyle = renderable.color;\r\n                ctx.fillRect(transform.x, transform.y, transform.width, transform.height);\r\n            }\r\n\r\n            if (this.scene.hasComponent(Sprite)) {\r\n                const sprite = this.scene.getComponent(Sprite)!;\r\n                this.play(ctx, [sprite])\r\n            }\r\n        }\r\n    }\r\n\r\n    renderElements(ctx: CanvasRenderingContext2D): void {\r\n        let entities: Entity[] = [];\r\n        let gameObjects: GameObject[] = [];\r\n\r\n        if (this.scene?.hasComponent(Entities)) {\r\n            entities = this.scene.getComponent(Entities)!.getEntities();\r\n        }\r\n\r\n        if (this.scene?.hasComponent(GameObjects)) {\r\n            gameObjects = this.scene.getComponent(GameObjects)!.getObjects();\r\n        }\r\n\r\n        for (const entity of entities) {\r\n            if (entity.hasComponent(Transform) && entity.hasComponent(Renderable)) {\r\n                const transform = entity.getComponent(Transform)!;\r\n                const renderable = entity.getComponent(Renderable)!;\r\n                ctx.fillStyle = renderable.color;\r\n                ctx.fillRect(transform.x, transform.y, transform.width, transform.height);\r\n            }\r\n\r\n            if (entity.hasComponent(Sprite)) {\r\n                const sprite = entity.getComponent(Sprite)!;\r\n                this.play(ctx, [sprite]);\r\n            }\r\n        }\r\n\r\n        for (const object of gameObjects) {\r\n            if (object.hasComponent(Transform) && object.hasComponent(Renderable)) {\r\n                const transform = object.getComponent(Transform)!;\r\n                const renderable = object.getComponent(Renderable)!;\r\n                ctx.fillStyle = renderable.color;\r\n                ctx.fillRect(transform.x, transform.y, transform.width, transform.height);\r\n            }\r\n\r\n            if (object.hasComponent(Sprite)) {\r\n                const sprite = object.getComponent(Sprite)!;\r\n                this.play(ctx, [sprite]);\r\n            }\r\n        }\r\n    }\r\n}","import { IRenderStrategy } from \"../interfaces/IScene\";\r\n\r\nexport class RenderSceneStrategy implements IRenderStrategy {\r\n    public renderStrategies: IRenderStrategy[] = [];\r\n\r\n    constructor(renderStrategies?: IRenderStrategy[]) {\r\n        this.renderStrategies = renderStrategies || [];\r\n    }\r\n    \r\n    render(): void {\r\n        for (const renderStrategy of this.renderStrategies) {\r\n            renderStrategy.render();\r\n        }\r\n    }\r\n}","import { IEngineControllerSystem } from \"../interfaces/IEngineControllerSystem\";\r\nimport { ISystem } from \"../interfaces/ISystem\";\r\n\r\n/**\r\n * ECS (Engine Controller System) is a singleton class that manages the execution of systems in the engine.\r\n */\r\nexport class ECS implements IEngineControllerSystem {\r\n    private static instance: ECS;\r\n    systems: ISystem[];\r\n\r\n    private constructor() {\r\n        this.systems = [];\r\n    }\r\n\r\n    static getInstance(): ECS {\r\n        if (!ECS.instance) {\r\n            ECS.instance = new ECS();\r\n        }\r\n        return ECS.instance;\r\n    }\r\n\r\n    addSystem(system: ISystem): this {\r\n        this.systems.push(system);\r\n        return this;\r\n    }\r\n    /**\r\n     * Executes all systems in the ECS.\r\n     * This method is called to update all systems in the engine.\r\n     */\r\n    execute(): void {\r\n        this.systems.forEach(system => system.execute());\r\n    }\r\n}","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nvar ownKeys = function(o) {\r\n    ownKeys = Object.getOwnPropertyNames || function (o) {\r\n        var ar = [];\r\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n        return ar;\r\n    };\r\n    return ownKeys(o);\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    var r, s = 0;\r\n    function next() {\r\n        while (r = env.stack.pop()) {\r\n            try {\r\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                if (r.dispose) {\r\n                    var result = r.dispose.call(r.value);\r\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                else s |= 1;\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\r\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\r\n        return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\r\n            return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __esDecorate: __esDecorate,\r\n    __runInitializers: __runInitializers,\r\n    __propKey: __propKey,\r\n    __setFunctionName: __setFunctionName,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,\r\n};\r\n","import { SceneDecorator } from \"../decorators/SceneDecorator\";\r\nimport { IGameObject } from \"../interfaces/IGameObject\";\r\nimport { ComponentManager } from \"./Injector\";\r\n/**\r\n * Scene is a class that represents a scene in the game engine.\r\n * It is a base class for all scenes and provides a incremental ID for each scene.\r\n * It also provides a canvas element for rendering the scene.\r\n * This class is the first class to be rendered in the game engine and is used to add entities or gameObjects to the scene.\r\n */\r\n@SceneDecorator.registerScene\r\nexport class Scene extends ComponentManager implements IGameObject {\r\n    private static _id: number = 0;\r\n    id: number;\r\n    canvas: HTMLCanvasElement;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        super();\r\n        this.id = Scene._id++;\r\n        this.canvas = canvas;\r\n    }\r\n}","import type { Scene } from \"../models/Scene\";\r\n/**\r\n * SceneDecorator is a decorator that registers a scene in the global state.\r\n * It is used to register scenes in the global state when they are created.\r\n */\r\nexport class SceneDecorator {\r\n\r\n    static registerScene(constructor: new (...args: any[]) => Scene) {\r\n        const original = constructor;\r\n    \r\n        const newConstructor = function(...args: any) {\r\n            const instance = new original(...args);\r\n            import(\"../state/GlobalState\").then(({ GlobalState }) => { \r\n                const globalState = GlobalState.getInstance();\r\n                const exits = globalState.scenes.find((scene) => scene.id === instance.id);\r\n                if (exits) {\r\n                    return exits;\r\n                }\r\n                globalState.scenes.push(instance);\r\n            });\r\n            return instance;\r\n        }\r\n\r\n        newConstructor.prototype = original.prototype;\r\n        Object.assign(newConstructor, original);\r\n\r\n        return newConstructor as unknown as typeof Scene;\r\n    }\r\n}","import { ColliderSystem } from \"../../systems/ColliderSystem\";\r\nimport { InputKeySystem } from \"../../systems/InputKeySystem\";\r\nimport { PhysicSystem } from \"../../systems/PhysicSystem\";\r\nimport { RenderSystem } from \"../../systems/RenderSystem\";\r\nimport { IEngine } from \"../interfaces/IEngine\";\r\nimport { IEngineControllerSystem } from \"../interfaces/IEngineControllerSystem\";\r\nimport { GlobalState } from \"../state/GlobalState\";\r\nimport { Collider } from \"../strategy/Collider\";\r\nimport { InputKeyEvent } from \"../strategy/InputKeyEvent\";\r\nimport { Physics } from \"../strategy/Physics\";\r\nimport { RenderScene } from \"../strategy/RenderScene\";\r\nimport { RenderSceneStrategy } from \"../strategy/RenderSceneStrategy\";\r\nimport { ECS } from \"./ECS\";\r\nimport { Scene } from \"./Scene\";\r\n\r\n/**\r\n * Engine is the main class that manages the game loop and the execution of systems.\r\n */\r\nexport class Engine implements IEngine {\r\n    isRunning: boolean;\r\n    lastTime: number;\r\n    ecs: IEngineControllerSystem;\r\n\r\n    constructor(canvas: HTMLCanvasElement) {\r\n        this.isRunning = false;\r\n        this.lastTime = 0;\r\n        this.ecs = ECS.getInstance();\r\n        const scene = new Scene(canvas);\r\n        GlobalState.getInstance().scenes.push(scene);\r\n        GlobalState.getInstance().currentScene = scene;\r\n        this.ecs.addSystem(new ColliderSystem(new Collider()));\r\n        this.ecs.addSystem(new PhysicSystem(new Physics()));\r\n        this.ecs.addSystem(new InputKeySystem(false, new InputKeyEvent()));\r\n        this.ecs.addSystem(new RenderSystem(new RenderSceneStrategy([\r\n            new RenderScene()\r\n        ])));\r\n    }\r\n\r\n    loop(timestamp: number): void {\r\n        if (!this.isRunning) return;\r\n        this.lastTime = timestamp;\r\n        this.ecs.execute();\r\n        requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n    start(): void {\r\n        this.isRunning = true;\r\n        this.lastTime = performance.now();\r\n        requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n    stop(): void {\r\n        this.isRunning = false;\r\n    }\r\n}","import { EntityDecorator } from \"../decorators/EntityDecorator\";\r\nimport { IEntity } from \"../interfaces/IEntity\";\r\nimport { ComponentManager } from \"./Injector\";\r\n/**\r\n * Entity is a class that represents an entity in the game engine.\r\n * It is a base class for all entities and provides a incremental ID for each entity.\r\n */\r\n@EntityDecorator.registerEntity\r\nexport class Entity extends ComponentManager implements IEntity {\r\n    private static _id: number = 0;\r\n    id: number;\r\n    constructor(){\r\n        super();\r\n        this.id = Entity._id++;\r\n    }\r\n}","import type { Entity } from \"../models/Entity\";\r\n/**\r\n * EntityDecorator is a decorator that registers an entity in the global state.\r\n * It is used to register entities in the global state when they are created.\r\n */\r\nexport class EntityDecorator {\r\n\r\n    static registerEntity(constructor: new (...args: any[]) => Entity){\r\n        const original = constructor;\r\n\r\n        const newConstructor = function(...args: any) {\r\n            const instance = new original(...args);\r\n            import(\"../state/GlobalState\").then(({ GlobalState }) => { \r\n                const globalState = GlobalState.getInstance();\r\n                const exits = globalState.entities.find((entity) => entity.id === instance.id);\r\n                if (exits) {\r\n                    return exits;\r\n                }\r\n                globalState.entities.push(instance);\r\n             });\r\n            return instance;\r\n        }\r\n\r\n        newConstructor.prototype = original.prototype;\r\n        Object.assign(newConstructor, original);\r\n\r\n        return newConstructor as unknown as typeof Entity;\r\n    }\r\n}","import { ObjectDecorator } from \"../decorators/ObjectDecorator\";\r\nimport { IGameObject } from \"../interfaces/IGameObject\";\r\nimport { ComponentManager } from \"./Injector\";\r\n/**\r\n * GameObject is a class that represents an gameObject in the game engine.\r\n * It is a base class for all entities and provides a incremental ID for each gameObject.\r\n */\r\n@ObjectDecorator.registerObject\r\nexport class GameObject extends ComponentManager implements IGameObject {\r\n    private static _id: number = 0;\r\n    id: number;\r\n    constructor(){\r\n        super();\r\n        this.id = GameObject._id++;\r\n    }\r\n}","import type { GameObject } from \"../models/GameObject\";\r\n/**\r\n * ObjectDecorator is a decorator that registers an object in the global state.\r\n * It is used to register objects in the global state when they are created.\r\n */\r\nexport class ObjectDecorator {\r\n\r\n    static registerObject(constructor: new (...args: any[]) => GameObject){\r\n            const original = constructor;\r\n    \r\n            const newConstructor = function(...args: any) {\r\n                const instance = new original(...args);\r\n                import(\"../state/GlobalState\").then(({ GlobalState }) => {\r\n                    const globalState = GlobalState.getInstance();\r\n                    const exits = globalState.objects.find((object) => object.id === instance.id);\r\n                    if (exits) {\r\n                        return exits;\r\n                    }\r\n                    globalState.objects.push(instance);\r\n                });\r\n                return instance;\r\n            }\r\n    \r\n            newConstructor.prototype = original.prototype;\r\n            Object.assign(newConstructor, original);\r\n    \r\n            return newConstructor as unknown as typeof GameObject;\r\n        }\r\n}","import { ISpriteSheet } from \"../interfaces/ISpriteSheet\";\r\nimport { Entity } from \"./Entity\";\r\nimport { GameObject } from \"./GameObject\";\r\nimport { ObjectBinder } from \"./Injector\";\r\nimport { Scene } from \"./Scene\";\r\n/**\r\n * Sprite is a class that represents a sprite sheet in the game engine.\r\n * It is a base class for all sprite sheets and provides a incremental ID for each sprite sheet.\r\n */\r\nexport class Sprite extends ObjectBinder<Entity | GameObject | Scene> implements ISpriteSheet {\r\n    imageSrc: string;\r\n    image: HTMLImageElement = new Image();\r\n    frameWidth: number;\r\n    frameHeight: number;\r\n    resizeWidth: number;\r\n    resizeHeight: number;\r\n    frameCount: number;\r\n    currentFrame: number;\r\n    x: number;\r\n    y: number;\r\n    initialX: number = 0;\r\n    initialY: number = 0;\r\n    x_offset: number;\r\n    y_offset: number;\r\n\r\n    constructor(imageSrc: string, frameWidth: number, frameHeight: number, resizeWidth: number, resizeHeight: number, frameCount: number, x?: number, y?: number, x_offset?: number, y_offset?: number, initialX?: number, initialY?: number) {\r\n        super();\r\n        this.imageSrc = imageSrc;\r\n        this.frameWidth = frameWidth;\r\n        this.frameHeight = frameHeight;\r\n        this.resizeWidth = resizeWidth;\r\n        this.resizeHeight = resizeHeight\r\n        this.frameCount = frameCount;\r\n        this.currentFrame = 1;\r\n        this.x = x ?? 0;\r\n        this.y = y ?? 0;\r\n        this.x_offset = x_offset ?? 0;\r\n        this.y_offset = y_offset ?? 0;\r\n        this.initialX = initialX ?? 0;\r\n        this.initialY = initialY ?? 0;\r\n        this.loadImage();\r\n    }\r\n    /**\r\n     * This method is used to load the image for the sprite sheet.\r\n     */\r\n    private loadImage(): void {\r\n        this.image.src = this.imageSrc;\r\n        this.image.onload = () => {\r\n            this.image = this.image;\r\n        };\r\n    }\r\n}","import { Entity } from \"./Entity\";\r\nimport { GameObject } from \"./GameObject\";\r\nimport { ObjectBinder } from \"./Injector\";\r\n/**\r\n * Physics is a class that represents a physics engine in the game engine.\r\n * Provides a abstract method to apply physics to an entity or gameObject.\r\n */\r\nexport abstract class Physics extends ObjectBinder<Entity | GameObject> {\r\n    public apply: boolean = true;\r\n    public type: \"physics\" | \"gravity\" | \"jump\" = \"physics\";\r\n    /**\r\n     * applyPhysics is an abstract method that must be implemented by subclasses.\r\n     * It is responsible for applying physics to the entity or gameObject.\r\n     */\r\n    public abstract applyPhysics(): void;\r\n}","import { Entities } from \"../../components/scene/Entities\";\r\nimport { GameObjects } from \"../../components/scene/GameObjects\";\r\nimport { Transform } from \"../../components/common/Transform\";\r\nimport { Entity } from \"../models/Entity\";\r\nimport { GameObject } from \"../models/GameObject\";\r\nimport { Physics } from \"../models/Physics\";\r\nimport { Scene } from \"../models/Scene\";\r\nimport { GlobalState } from \"../state/GlobalState\";\r\n/**\r\n * * Gravity class to apply gravity to an object (the object is a reference to an entity or a game object).\r\n * * The gravity is applied to the object if it is not colliding with any other object or entity.\r\n */\r\nexport class Gravity extends Physics {\r\n    public type: \"physics\" | \"gravity\" | \"jump\" = \"gravity\";\r\n    private gravity: number = 9.8;\r\n    private scene = GlobalState.getInstance().currentScene as Scene;\r\n    public stop: boolean = false;\r\n\r\n    constructor(gravity?: number) {\r\n        super();\r\n        this.gravity = gravity ?? this.gravity;\r\n    }\r\n\r\n    public applyPhysics(): void {\r\n        const transform = this.object.getComponent(Transform);\r\n        if (transform && !this.stop) {\r\n\r\n            const collisons = this.checkPossibleCollision(transform);\r\n            if (collisons) {\r\n                if (collisons.getComponent(Transform)!.y == transform.y + transform.height) {\r\n                    this.apply = false;\r\n                }\r\n                else this.apply = true;\r\n            } else if (this.checkEmptySpace(transform)) {\r\n                this.apply = true;\r\n            }\r\n        }\r\n\r\n        if (transform && this.apply && !this.stop) {\r\n            transform.translate(\"down\")\r\n        }\r\n    }\r\n\r\n    private checkPossibleCollision(transform: Transform): Entity | GameObject | undefined {\r\n        let entities: Entity[] = [];\r\n        let objects: GameObject[] = [];\r\n\r\n        if (this.scene.hasComponent(Entities)) {\r\n            entities = this.scene.getComponent(Entities)!.getEntities();\r\n        }\r\n\r\n        if (this.scene.hasComponent(GameObjects)) {\r\n            objects = this.scene.getComponent(GameObjects)!.getObjects();\r\n        }\r\n\r\n        entities.sort((a, b) => a.getComponent(Transform)!.y - b.getComponent(Transform)!.y);\r\n        objects.sort((a, b) => a.getComponent(Transform)!.y - b.getComponent(Transform)!.y);\r\n\r\n        const entity = entities.find(e => {\r\n            return (\r\n                transform.x < e.getComponent(Transform)!.x + e.getComponent(Transform)!.width &&\r\n                transform.x + transform.width > e.getComponent(Transform)!.x &&\r\n                (transform.y + transform.height) <= e.getComponent(Transform)!.y\r\n            )\r\n        })\r\n\r\n        const object = objects.find(o => {\r\n            return (\r\n                transform.x < o.getComponent(Transform)!.x + o.getComponent(Transform)!.width &&\r\n                transform.x + transform.width > o.getComponent(Transform)!.x &&\r\n                (transform.y + transform.height) <= o.getComponent(Transform)!.y\r\n            )\r\n        });\r\n\r\n        if (!entity && !object) {\r\n            return undefined;\r\n        } else if (!entity) {\r\n            return object;\r\n        } else if (!object) {\r\n            return entity;\r\n        }\r\n\r\n        return entity!.getComponent(Transform)!.y < object!.getComponent(Transform)!.y ? entity : object;\r\n    }\r\n\r\n    private checkEmptySpace(transform: Transform): boolean {\r\n        let entities: Entity[] = [];\r\n        let objects: GameObject[] = [];\r\n\r\n        if (this.scene.hasComponent(Entities)) {\r\n            entities = this.scene.getComponent(Entities)!.getEntities();\r\n        }\r\n\r\n        if (this.scene.hasComponent(GameObjects)) {\r\n            objects = this.scene.getComponent(GameObjects)!.getObjects();\r\n        }\r\n        const entity = entities.find(e => {\r\n            const t = e.getComponent(Transform)!;\r\n            return (\r\n                transform.x < t.x + t.width &&\r\n                transform.x + transform.width > t.x &&\r\n                e.id !== this.object.id\r\n            )\r\n        })\r\n\r\n        const object = objects.find(o => {\r\n            const t = o.getComponent(Transform)!;\r\n            return (\r\n                transform.x < t.x + t.width &&\r\n                transform.x + transform.width > t.x &&\r\n                o.id !== this.object.id\r\n            )\r\n        });\r\n\r\n        return entity === undefined && object === undefined;\r\n    }\r\n}","import { Transform } from \"../../components/common/Transform\";\r\nimport { Entity } from \"../models/Entity\";\r\nimport { Physics } from \"../models/Physics\";\r\nimport { Physics as PhysicsComponent } from \"../../components/common/Physics\";\r\nimport { Gravity } from \"./Gravity\";\r\nimport { GlobalState } from \"../state/GlobalState\";\r\nimport { Entities } from \"../../components/scene/Entities\";\r\nimport { GameObjects } from \"../../components/scene/GameObjects\";\r\nimport { Scene } from \"../models/Scene\";\r\n/**\r\n * * Jump class to apply jump to an object (the object is a reference to an entity or a game object).\r\n * * The jump is applied to the object if it is not colliding with any other object or entity or if it is on the ground. \r\n */\r\nexport class Jump extends Physics {\r\n    public type: \"physics\" | \"gravity\" | \"jump\" = \"jump\";\r\n    private scene = GlobalState.getInstance().currentScene as Scene;\r\n    private movementTimeout: number | null = null;\r\n    public apply: boolean = false;\r\n    public stop: boolean = true;\r\n    public jumpSpeed: number = 10;\r\n\r\n    constructor(jumpSpeed?: number) {\r\n        super();\r\n        this.jumpSpeed = jumpSpeed ?? this.jumpSpeed;\r\n    }\r\n\r\n    public applyPhysics(): void {\r\n        const transform = this.object.getComponent(Transform);\r\n        if (!transform || !this.apply) return;\r\n\r\n        const hasGravity = this.checkIfHasGravity();\r\n        if (!hasGravity) return;\r\n\r\n        const gravity = this.object.getComponent(PhysicsComponent)!.physics.find(p => p.type === \"gravity\") as Gravity;\r\n\r\n        if (!gravity.stop && this.isOnGround(transform)) {\r\n            gravity.stop = true;\r\n            this.stop = false;\r\n            this.resetTimeout(this.jumpSpeed, gravity);\r\n        }\r\n\r\n        if (!this.stop && this.checkIfCanJump(transform)) {\r\n            transform.translate(\"up\");\r\n        } else {\r\n            this.apply = false;\r\n            this.stop = true;\r\n            gravity.stop = false;\r\n        }\r\n    }\r\n\r\n    private checkIfHasGravity(): boolean {\r\n        const physics = this.object.getComponent(PhysicsComponent);\r\n        return physics?.physics.some(p => p.type === \"gravity\") ?? false;\r\n    }\r\n\r\n    private isOnGround(transform: Transform): boolean {\r\n        let entity: Entity | undefined;\r\n        let object: Entity | undefined;\r\n        if (this.scene.hasComponent(Entities)){\r\n            entity = this.scene.getComponent(Entities)!.getEntities().find(e => {\r\n                const t = e.getComponent(Transform)!;\r\n                return (\r\n                    transform.x < t.x + t.width &&\r\n                    transform.x + transform.width > t.x &&\r\n                    transform.y + transform.height === t.y &&\r\n                    e !== this.object\r\n                )\r\n            })\r\n        }\r\n\r\n        if (this.scene.hasComponent(GameObjects)){\r\n            object = this.scene.getComponent(GameObjects)!.getObjects().find(o => {\r\n                const t = o.getComponent(Transform)!;\r\n                return (\r\n                    transform.x < t.x + t.width &&\r\n                    transform.x + transform.width > t.x &&\r\n                    transform.y + transform.height === t.y &&\r\n                    o !== this.object\r\n                )\r\n            })\r\n        }\r\n        return entity !== undefined || object !== undefined;\r\n    }\r\n\r\n    private checkIfCanJump(transform: Transform): boolean {\r\n        let entities: Entity[] = [];\r\n        let objects: Entity[] = [];\r\n\r\n        if (this.scene.hasComponent(Entities)) {\r\n            entities = this.scene.getComponent(Entities)!.getEntities();\r\n        }\r\n\r\n        if (this.scene.hasComponent(GameObjects)) {\r\n            objects = this.scene.getComponent(GameObjects)!.getObjects();\r\n        }\r\n\r\n        entities.sort((a, b) => a.getComponent(Transform)!.y - b.getComponent(Transform)!.y);\r\n        objects.sort((a, b) => a.getComponent(Transform)!.y - b.getComponent(Transform)!.y);\r\n\r\n        const entity = entities.find(e => {\r\n            const t = e.getComponent(Transform)!;\r\n            return (\r\n                transform.x < t.x + t.width &&\r\n                transform.x + transform.width > t.x &&\r\n                transform.y === t.y + t.height\r\n            )\r\n        })\r\n\r\n        const object = objects.find(o => {\r\n            const t = o.getComponent(Transform)!;\r\n            return (\r\n                transform.x < t.x + t.width &&\r\n                transform.x + transform.width > t.x &&\r\n                transform.y === t.y + t.height\r\n            )\r\n        });\r\n        return entity === undefined && object === undefined;\r\n    }\r\n\r\n    private resetTimeout(movementSpeed: number, gravity: Gravity): void {\r\n        if (this.movementTimeout) {\r\n            clearTimeout(this.movementTimeout);\r\n        }\r\n        this.movementTimeout = setTimeout(() => {\r\n            this.apply = false;\r\n            this.stop = true;\r\n            gravity.stop = false;\r\n        }, (movementSpeed ** 3)) as unknown as number;\r\n    }\r\n\r\n}"],"names":["System","constructor","this","id","_id","ColliderSystem","strategy","super","execute","collide","InputKeySystem","setupAlready","setup","document","addEventListener","e","trigger","key","PhysicSystem","applyPhysics","RenderSystem","render","GlobalState","currentScene","scenes","entities","objects","getInstance","instance","ComponentManager","_components","Map","addComponent","component","set","name","setObject","getComponent","type","get","hasComponent","has","ObjectBinder","object","Component","Transform","x","y","width","height","movementSpeed","rotation","movementTimeout","MOVEMENT_TIMEOUT_DURATION","direction","translate","move","trackMovementDirection","resetMovementTimeout","undo","clearTimeout","setTimeout","Collider","onCollision","isColliding","collider","entityCollider","otherCollider","t","otherT","collsionDetected","collisionEnter","transform","otherTransform","globalState","entitiesColliderExecuting","objectsColliderExecuting","entityCollide","objectCollide","filter","ColliderComponent","entity","entityTwo","colliderTwo","InputKeys","hashEvents","_a","event","InputKeyEvent","inputKey","physics","length","physic","Entities","setEntities","getEntities","getEntityById","find","addEntity","push","removeEntity","index","findIndex","splice","GameObjects","setObjects","getObjects","getObjectById","addObject","removeObject","gameObjects","scene","PhysicComponent","Renderable","color","sprite","speed","loop","currentSpriteIndex","bindObject","getCurrentSprite","_b","nextSprite","SpriteAnimationController","stopped","draw","ctx","sprites","x_offset","initialX","initialY","y_offset","frameWidth","frameHeight","resizeWidth","resizeHeight","currentFrame","image","drawImage","currentSprite","frameCount","update","reset","play","stop","RenderScene","undefined","canvas","getContext","clearRect","renderScene","renderElements","renderable","fillStyle","fillRect","Sprite","RenderSceneStrategy","renderStrategies","renderStrategy","ECS","systems","addSystem","system","forEach","__decorate","decorators","target","desc","d","c","arguments","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","SuppressedError","Scene","Scene_1","registerScene","original","newConstructor","args","Promise","resolve","then","GlobalState$1","exits","prototype","assign","HTMLCanvasElement","Engine","isRunning","lastTime","ecs","Physics","timestamp","requestAnimationFrame","bind","start","performance","now","Entity","Entity_1","registerEntity","GameObject","GameObject_1","registerObject","imageSrc","Image","loadImage","src","onload","apply","Gravity","gravity","collisons","checkPossibleCollision","checkEmptySpace","sort","a","b","o","Jump","jumpSpeed","checkIfHasGravity","PhysicsComponent","p","isOnGround","resetTimeout","checkIfCanJump","some","Math","pow"],"mappings":"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","x_google_ignoreList":[23]}